# Swagger代码生成规范

## 基础配置

### Swagger文件位置

- 主文件: `src/services/swaggerApi.json`
- 格式: Swagger 2.0 规范
- 基础路径: `/api/console`

### 标准响应格式

所有接口遵循统一的响应格式：

```typescript
interface StandardResponse<T = any> {
  code: number; // 错误码，0成功，其他失败
  msg: string; // 错误信息
  data: T; // 响应数据
}
```

## 代码生成规则

### 1. 类型定义生成

基于Swagger schema自动生成TypeScript类型定义：

```typescript
// 根据接口路径和功能生成命名空间
declare namespace {ModuleName}Type {
  /** 请求参数类型 */
  type {OperationName}Request = {
    // 从parameters字段生成
  };

  /** 响应数据类型 */
  type {OperationName}Response = {
    // 从responses.200.schema生成
  };

  /** 列表项类型 */
  type {EntityName}Item = {
    // 从data.properties生成
  };
}
```

### 2. API接口生成

基于Swagger paths自动生成API接口函数：

```typescript
/**
 * @name {summary}
 * @description {description}
 */
export async function {operationName}(
  params: {ModuleName}Type.{OperationName}Request
) {
  return request<{ModuleName}Type.{OperationName}Response>(
    `${API_URL}{path}`,
    {
      method: '{method}',
      headers: {
        'Content-Type': '{consumes[0]}',
      },
      data: params,
    }
  );
}
```

### 3. 文件组织结构

按模块生成对应的文件结构：

```
src/services/
├── {module}/
│   ├── api.ts          # API接口函数
│   └── typings.d.ts    # TypeScript类型定义
└── swaggerApi.json     # Swagger规范源文件
```

## 生成规则详解

### 路径解析规则

```javascript
// 路径: /api/console/user/list
// 生成: src/services/user/api.ts
// 函数名: getUserList
// 类型命名空间: UserType
```

### 参数处理规则

1. **Query参数**: 转为函数params参数
2. **Body参数**: 转为函数data参数
3. **Header参数**: 自动添加到headers
4. **Path参数**: 集成到URL路径中

### 响应处理规则

1. **成功响应**: 提取data字段作为实际返回类型
2. **错误响应**: 统一由请求拦截器处理
3. **分页数据**: 自动识别并生成分页类型

### 类型映射规则

| Swagger类型 | TypeScript类型 | 说明     |
| ----------- | -------------- | -------- |
| string      | string         | 字符串   |
| number      | number         | 数字     |
| integer     | number         | 整数     |
| boolean     | boolean        | 布尔值   |
| array       | T[]            | 数组     |
| object      | interface      | 对象     |
| file        | File           | 文件类型 |

## 实际生成示例

### 基于现有Swagger生成上传接口

输入Swagger定义：

```json
{
  "paths": {
    "/upload": {
      "post": {
        "tags": ["公共分类"],
        "summary": "本地文件上传（server方式）",
        "parameters": [
          {
            "name": "key",
            "in": "formData",
            "required": true,
            "description": "文件名",
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ]
      }
    }
  }
}
```

生成的类型定义：

```typescript
declare namespace CommonType {
  /** 上传文件参数 */
  type UploadFileParams = {
    key: string;
    file: File;
    chunkIndex?: string;
    chunkTotal?: string;
    chunkHash?: string;
  };
}
```

生成的API接口：

```typescript
/**
 * @name 本地文件上传（server方式）
 * @description 支持普通上传和分片上传
 */
export async function uploadFile(params: CommonType.UploadFileParams) {
  const formData = new FormData();

  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined) {
      formData.append(key, value);
    }
  });

  return request<void>(`${API_URL}/upload`, {
    method: 'POST',
    headers: {
      'X-Auth-Token': getToken(),
    },
    data: formData,
  });
}
```

## 高级功能

### 1. 权限注解生成

自动识别接口权限要求并生成注释：

```typescript
/**
 * @name 获取用户列表
 * @permission user:list
 * @description 需要user:list权限才能访问
 */
```

### 2. 分页接口识别

自动识别分页接口并生成标准分页类型：

```typescript
type UserListResponse = API.PagedResponse<UserType.UserItem>;
```

### 3. 枚举类型生成

从Swagger enum定义生成TypeScript枚举：

```typescript
enum UserStatus {
  ACTIVE = 1,
  INACTIVE = 0,
}
```

### 4. 错误码映射

自动生成错误码常量：

```typescript
export const ERROR_CODES = {
  SUCCESS: 0,
  AUTH_FAILED: 401,
  PERMISSION_DENIED: 403,
  NOT_FOUND: 404,
} as const;
```

## 使用指南

### 生成新接口的步骤

1. 更新 `src/services/swaggerApi.json`
2. 运行代码生成命令或请求AI生成
3. 检查生成的类型定义和接口
4. 集成到具体的页面组件中
5. 配置路由和权限控制

### AI生成命令示例

```
根据swaggerApi.json中的 /api/console/order 相关接口，生成完整的订单管理代码，包括：
1. TypeScript类型定义
2. API接口函数
3. 页面组件（列表、新增、编辑）
4. 路由配置
5. 权限控制配置
```

### 质量检查

生成代码后需要检查：

- [ ] 类型定义完整且准确
- [ ] 接口函数参数正确
- [ ] 错误处理机制完善
- [ ] 权限控制集成到位
- [ ] 遵循项目命名规范
- [ ] 注释信息完整description: globs: alwaysApply: false

---
